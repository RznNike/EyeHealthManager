apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

android {
    namespace 'ru.rznnike.eyehealthmanager'

    compileSdkVersion TARGET_SDK
    buildToolsVersion '33.0.0'

    defaultConfig {
        applicationId 'ru.rznnike.eyehealthmanager'
        minSdkVersion MIN_SDK
        targetSdkVersion TARGET_SDK
        versionCode VERSION_CODE
        versionName VERSION_NAME
    }

    signingConfigs {
        config {
            storeFile file('../eyehealthmanager.jks')
            keyAlias 'eyehealthmanager'
            Properties localProperties = new Properties()
            localProperties.load(file('../local.properties').newDataInputStream())
            if ((localProperties.getProperty('PROJECT_KEY_PASSWORD') != null) && (localProperties.getProperty('PROJECT_KEYSTORE_PASSWORD') != null)) {
                keyPassword localProperties.getProperty('PROJECT_KEY_PASSWORD')
                storePassword localProperties.getProperty('PROJECT_KEYSTORE_PASSWORD')
            } else {
                throw new GradleException('Not found signing config password properties')
            }
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            signingConfig signingConfigs.config
            manifestPlaceholders = [enableCrashReporting: 'false']
            versionNameSuffix " debug"
        }
        staging {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
            manifestPlaceholders = [enableCrashReporting: 'true']
            versionNameSuffix " staging"
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
            manifestPlaceholders = [enableCrashReporting: 'true']
            versionNameSuffix ""
        }
    }

    lint {
        abortOnError true
        checkAllWarnings true
        ignoreWarnings false
        warningsAsErrors false
        checkDependencies true
        htmlReport true
        explainIssues true
        noLines false
        textOutput file('stdout')
        disable 'MissingClass', 'NewApi'
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${APK_NAME} ${variant.versionName} ${name}.apk"
        }
    }
    afterEvaluate {
        applicationVariants.all {
            variant ->
                def variantName = variant.name.capitalize()
                if (variantName != 'Debug') {
                    project.tasks["compile${variantName}Sources"].dependsOn(project.tasks["lint${variantName}"])
                }
        }
    }
    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
        freeCompilerArgs += "-opt-in=kotlin.RequiresOptIn"
    }
    buildFeatures {
        viewBinding true
    }
    bundle {
        abi.enableSplit = false
        language.enableSplit = false
    }
}

dependencies {
    implementation project(':data')
    implementation project(':domain')
    implementation project(':device')
    implementation project(':resources')

    // Desugaring
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.2.2'

    // AndroidX
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.preference:preference-ktx:1.2.0'
    implementation "androidx.viewpager2:viewpager2:1.1.0-beta01"
    implementation "androidx.annotation:annotation:1.5.0"
    implementation 'androidx.fragment:fragment-ktx:1.5.4'
    implementation "androidx.window:window:1.0.0"

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"

    // Material
    implementation 'com.google.android.material:material:1.7.0'

    // Firebase
    implementation 'com.google.firebase:firebase-crashlytics-ktx:18.3.2'
    implementation 'com.google.firebase:firebase-messaging:23.1.0'

    // Koin
    // https://github.com/InsertKoinIO/koin
    implementation "io.insert-koin:koin-core:$koinVersion"
    implementation "io.insert-koin:koin-android:$koinVersion"

    // Moxy MVP
    // https://github.com/moxy-community/Moxy
    def moxyVersion = '2.2.2'
    implementation "com.github.moxy-community:moxy:$moxyVersion"
    kapt "com.github.moxy-community:moxy-compiler:$moxyVersion"
    implementation "com.github.moxy-community:moxy-androidx:$moxyVersion"
    implementation "com.github.moxy-community:moxy-material:$moxyVersion"
    implementation "com.github.moxy-community:moxy-ktx:$moxyVersion"

    // Cicerone navigation
    // https://github.com/terrakok/Cicerone
    implementation 'com.github.terrakok:cicerone:7.1'

    // FastAdapter
    // https://github.com/mikepenz/FastAdapter
    def fastAdapterVersion = '5.7.0'
    implementation "com.mikepenz:fastadapter:$fastAdapterVersion"
    implementation "com.mikepenz:fastadapter-extensions-diff:$fastAdapterVersion"
    implementation "com.mikepenz:fastadapter-extensions-drag:$fastAdapterVersion"
    implementation "com.mikepenz:fastadapter-extensions-scroll:$fastAdapterVersion"
    implementation "com.mikepenz:fastadapter-extensions-swipe:$fastAdapterVersion"
    implementation "com.mikepenz:fastadapter-extensions-ui:$fastAdapterVersion"
    implementation "com.mikepenz:fastadapter-extensions-utils:$fastAdapterVersion"
    implementation "com.mikepenz:fastadapter-extensions-binding:$fastAdapterVersion"

    // Image loader
    // https://github.com/coil-kt/coil
    implementation "io.coil-kt:coil:2.2.2"

    // Language
    // https://github.com/YarikSOffice/lingver
    implementation "com.github.YarikSOffice:lingver:1.3.0"

    // MPAndroidChart
    // https://github.com/PhilJay/MPAndroidChart
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'

    // Reflection
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

    // ViewBinding
    // https://github.com/kirich1409/ViewBindingPropertyDelegate
    implementation 'com.github.kirich1409:viewbindingpropertydelegate-noreflection:1.5.6'

    // ExpandableLayout
    // https://github.com/cachapa/ExpandableLayout
    implementation 'com.github.cachapa:ExpandableLayout:2.9.2'

    // GestureViews
    // https://github.com/alexvasilkov/GestureViews
    implementation "com.alexvasilkov:gesture-views:2.8.3"

    // FlexboxLayoutManager
    // https://github.com/google/flexbox-layout
    implementation 'com.google.android.flexbox:flexbox:3.0.0'
}
